omega = var(crix_returns),
alpha = 0.1 * var(crix_returns),
beta = 0.1,
gamma = 0, rf = 0))
#how to  test? Neyman-Pearson or just log likelihood  ratio statistics. LL got a bit higher though
HNfit
'Title:
Heston-Nandi Garch Parameter Estimation
Call:
hngarchFit(x = crix_returns, model = list(lambda = -0.5, omega = var(crix_returns),     alpha = 0.1 * var(crix_returns), beta = 0.1, gamma = 0, rf = 0))
Parameters:
lambda       omega       alpha        beta       gamma
-0.5000000   0.0013634   0.0001363   0.1000000   0.0000000
rf
0.0000000
Coefficients: lambda, omega, alpha, beta, gamma
lambda       omega       alpha        beta       gamma
-2.1099940   0.0002199   0.0002043   0.6733516   0.0000000
Log-Likelihood:
1935.239
Persistence and Variance:
0.6733516
0.001298449 '
summary(HNfit)#to get coefficients
lambda <- HNfit$model$lambda
omega <- HNfit$model$omega
alpha <- HNfit$model$alpha
beta <- HNfit$model$beta
gamma <- HNfit$model$gamma
h <- HNfit$sigma2#unconditional expectation
#Now calculating epsilon
eps <- crix_returns+0.5*h-h^0.5
#Now calculating h(t+1)
h1 <- omega+beta*h+alpha*(eps-((gamma+lambda)*h^0.5))^2
#Now to V-CRIX
VCRIX <- 100*((365*h1)^0.5)
#Adding VCRIX to newcrix set
newcrix$VCRIX <- 0
newcrix$VCRIX[c(2:1112)] <- VCRIX
#filling up the first value  of VCRIX with the next value
newcrix$VCRIX[1] <- newcrix$VCRIX[2]
max(newcrix$Price)
par(mar=c(5,5,2,5))
with(newcrix, plot(Date, Price, type="line",col="black", ylab="CRIX", ylim=c(200,12000), xlab=NA))
par(new=T)
with(newcrix, plot(Date, VCRIX, type="line", col= "blue",ylab='', ylim=c(57.2,57.8)))
axis(side=4)
mtext(side=4, line=3, 'VCRIX')
par(mar=c(5,5,2,5))
with(newcrix, plot(Date, Price, type="line",col="black", ylab="CRIX", ylim=c(200,12000), xlab=NA))
par(new=T)
with(newcrix, plot(Date, VCRIX, type="line", col= "blue",axes=FALSE, ylim=c(57.2,57.8)))
axis(side=4)
mtext(side=4, line=3, 'VCRIX')
par(mar=c(5,5,2,5))
with(newcrix, plot(Date, Price, type="line",col="black", ylab="CRIX", ylim=c(200,12000), xlab=NA))
par(new=T)
with(newcrix, plot(Date, VCRIX, type="line", col= "blue",axes=FALSE, ylim=c(57.2,57.8)))
axis(side=4)
mtext(side=4, line=3)
par(mar=c(5,5,2,5))
with(newcrix, plot(Date, Price, type="line",col="black", ylab="CRIX", ylim=c(200,12000), xlab=NA))
par(new=T)
with(newcrix, plot(Date, VCRIX, type="line", col= "blue",axes=FALSE, ylim=c(57.2,57.8)))
axis(side=4)
mtext(side=4, line=3, 'VCRIX')
par(mar=c(5,5,2,5))
with(newcrix, plot(Date, Price, type="line",col="black", ylab="CRIX", ylim=c(200,12000), xlab=NA))
par(new=T)
with(newcrix, plot(Date, VCRIX, type="line", col= "blue",axes=FALSE, xlab="", ylab="",ylim=c(57.2,57.8)))
axis(side=4)
mtext(side=4, line=3, 'VCRIX')
par(mar=c(5,5,2,5))
with(newcrix, plot(Date, Price, type="line",col="black", ylab="CRIX", ylim=c(200,12000), xlab=NA))
par(new=T)
with(newcrix, plot(Date, VCRIX, type="line", col= "blue",axes=FALSE, xlab="", ylab="",ylim=c(57.2,57.8)))
axis(side=4)
mtext(side=4, line=3, 'VCRIX')
theme_bw() +
#eliminates background, gridlines, and chart border
theme(
plot.background = element_blank()
,panel.grid.major = element_blank()
,panel.grid.minor = element_blank()
,panel.border = element_blank()
)
library(rjson)
library(ggplot2)
json_file <- "http://crix.hu-berlin.de/data/crix.json"
newcrix <- fromJSON(file=json_file)
newcrix <- data.frame(matrix(unlist(newcrix), nrow=1113, byrow=T), stringsAsFactors=FALSE)
colnames(newcrix) <- c("Date","Price")
newcrix$Price <- as.numeric(newcrix$Price)
newcrix$Date <- as.Date(newcrix$Date)
###Previousversion###
# install and load packages
libraries = c("fOptions")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
crix_returns= diff(log(newcrix$Price))
#Modelling
HNfit = hngarchFit(crix_returns,
model = list(lambda = -0.5,
omega = var(crix_returns),
alpha = 0.1 * var(crix_returns),
beta = 0.1,
gamma = 0, rf = 0))
#how to  test? Neyman-Pearson or just log likelihood  ratio statistics. LL got a bit higher though
HNfit
'Title:
Heston-Nandi Garch Parameter Estimation
Call:
hngarchFit(x = crix_returns, model = list(lambda = -0.5, omega = var(crix_returns),     alpha = 0.1 * var(crix_returns), beta = 0.1, gamma = 0, rf = 0))
Parameters:
lambda       omega       alpha        beta       gamma
-0.5000000   0.0013634   0.0001363   0.1000000   0.0000000
rf
0.0000000
Coefficients: lambda, omega, alpha, beta, gamma
lambda       omega       alpha        beta       gamma
-2.1099940   0.0002199   0.0002043   0.6733516   0.0000000
Log-Likelihood:
1935.239
Persistence and Variance:
0.6733516
0.001298449 '
summary(HNfit)#to get coefficients
lambda <- HNfit$model$lambda
omega <- HNfit$model$omega
alpha <- HNfit$model$alpha
beta <- HNfit$model$beta
gamma <- HNfit$model$gamma
h <- HNfit$sigma2#unconditional expectation
#Now calculating epsilon
eps <- crix_returns+0.5*h-h^0.5
#Now calculating h(t+1)
h1 <- omega+beta*h+alpha*(eps-((gamma+lambda)*h^0.5))^2
#Now to V-CRIX
VCRIX <- 100*((365*h1)^0.5)
#Adding VCRIX to newcrix set
newcrix$VCRIX <- 0
newcrix$VCRIX[c(2:1113)] <- VCRIX
#filling up the first value  of VCRIX with the next value
newcrix$VCRIX[1] <- newcrix$VCRIX[2]
max(newcrix$Price)
par(mar=c(5,5,2,5))
with(newcrix, plot(Date, Price, type="line",col="black", ylab="CRIX", ylim=c(200,12000), xlab=NA))
par(new=T)
with(newcrix, plot(Date, VCRIX, type="line", col= "blue",axes=FALSE, xlab="", ylab="",ylim=c(57.2,57.8)))
axis(side=4)
mtext(side=4, line=3, 'VCRIX')
setwd("~/")
setwd("~/Desktop/VCRIXgit/VCRIXindex")
load("vcrix.RData")
# install and load packages
libraries = c("lubridate", "zoo", "reshape2", "plyr", "MTS", "ggplot2")
lapply(libraries, function(x)
if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries,
library,
quietly = TRUE,
character.only = TRUE)
#Prepare data
data2 <- data[, c("crypto_symbol", "price_usd", "date")]
data2$date <- as.Date(data2$date)
weights$date <- as.Date(weights$date)
#Ensure correct variable names
colnames(weights) <- c("crypto", "weights", "date")
colnames(data2) <- c("crypto", "price", "date")
#Select relevant components
data <- data2[data2$crypto %in% weights$crypto, ]
w <- weights[order(weights$crypto), ]
p <- data[order(data$crypto), ]
#Transform into time series format
wtable <- reshape(  #for weights
w,
v.names = "weights",
idvar = "date",
timevar = "crypto",
direction = "wide"
)
ptable <- reshape(  #for prices
p,
v.names = "price", #names of variables in the long format
idvar = "date",    #indicating time variable
timevar = "crypto",
direction = "wide"
)
ptable <- ptable[order(ptable$date), ] #alphabetic ordering of cryptos
wtable <- wtable[order(wtable$date), ] #and corresponding weights
#Ensure there are no NAs
ptable[, -1] <- na.locf(ptable[, -1])
#Convert prices into returns
ret <- function(x) {
diff(log(x))
}
returns <- colwise(ret)(ptable[, -1])
returns$date <- ptable$date[-1]
returns$dat <- as.yearmon(returns$date, "%y-%m")
wtable$dat <- as.yearmon(wtable$date, "%y-%m")
wtable$date <- NULL
#Merge price and weight tables into the main dataset
ts <- merge(returns, wtable, by = "dat")
ts$dat <- NULL
# Double check for missing values to avoid NA in var-covar matrix estimation
ts[, grepl("price", names(ts))] <-
na.locf(ts[, grepl("price", names(ts))])
is.na(ts) <- do.call(cbind, lapply(ts, is.infinite))
ts[is.na(ts)] <- 0 #otherwise EWMA will return NAs
#Estimating variance covariance matrix with EWMA
elem <-
length(grep(x = colnames(ts), pattern = "price")) #number of cryptos
#select lambda
volaest <- EWMAvol(ts[, grepl("price", names(ts))], lambda = 0.82)
#estimation takes around takes 5 min
#reorganise the list of var-covar matrices
vol <- volaest[1]
v <- vol[[1]]
var <- c(1:nrow(ts))
vv <-
lapply(1:nrow(v), function(x)
matrix(
v[x, ],
nrow = elem,
ncol = elem,
byrow = TRUE
))
ww <-
as.matrix(ts[, grep(x = colnames(ts), pattern = "weights")]) #selecting weights
#Plugging weights and var-covar matrix into formula
for (i in 1:nrow(ts)) {
var[i] = as.matrix(t(ww[i, ])) %*% vv[[i]] %*% ww[i, ]
}
index <- data.frame("vola" = sqrt(var), "date" = ts$date)
index$vcrix = c(1:nrow(index))
index$divisor <- c(1:nrow(index))
index$daymonth = as.Date(data$date, "%m-%d")
index$daymonth = as.Date(index$date, "%m-%d")
View(index)
index$day = lubridate::day(index$date)
index$month = lubridate::month(index$date)
index$daymonth <- NULL
index$recalc <- 0
for (i in 1:nrow(index)) {
if (index$month[i]== 2||5||8||11 & index$day[i]==1)
{index$recalc[i] = 1}
else{index$recalc[i]=0}
}
index$recalc <- 0
for (i in 1:nrow(index)) {
if (index$month[i]== 2||5||8||11 && index$day[i]==1)
{index$recalc[i] = 1}
else{index$recalc[i]=0}
}
#Set up the reschale date
for (i in 1:nrow(index)) {
if (index$month[i]== 2||5||8||11 && index$day[i]==1)
{index$recalc[i] = 1}
else{index$recalc[i]=0}
}
index$recalc <- 0
for (i in 1:nrow(index)) {
if (index$month[i]== 2|5|8|11 & index$day[i]==1)
{index$recalc[i] = 1}
else{index$recalc[i]=0}
}
index$recalc <- 0
for (i in 1:nrow(index)) {
if (index$month[i]== 2|index$month[i]== 5|index$month[i]== 8|index$month[i]== 11 & index$day[i]==1)
{index$recalc[i] = 1}
else{index$recalc[i]=0}
}
index$recalc <- 0
for (i in 1:nrow(index)) {
if (index$day[i]==1 && index$month[i]== 2|index$month[i]== 5|index$month[i]== 8|index$month[i]== 11)
{index$recalc[i] = 1}
else{index$recalc[i]=0}
}
index$day=1
index$day = lubridate::day(index$date)
index$recalc <- 0
for (i in 1:nrow(index)) {
if (index$day[i]==1 & index$month[i]== 2|index$month[i]== 5|index$month[i]== 8|index$month[i]== 11)
{index$recalc[i] = 1}
else{index$recalc[i]=0}
}
index$recalc <- 0
for (i in 1:nrow(index)) {
if (index$day[i]=="1" & index$month[i]== 2|index$month[i]== 5|index$month[i]== 8|index$month[i]== 11)
{index$recalc[i] = 1}
else{index$recalc[i]=0}
}
ifelse(index$day== 1 && index$month== 2|index$month== 5|index$month== 8|index$month== 11, index$recalc = 1, index$recalc=0)
ifelse(index$day== 1 && index$month== 2|index$month== 5|index$month== 8|index$month== 11, index$recalc == 1, index$recalc==0)
index$recalc <- 0
ifelse(index$day== 1 && index$month== 2|index$month== 5|index$month== 8|index$month== 11, index$recalc == 1, index$recalc==0)
for (i in 1:nrow(index)) {
if (index$day[i]== 1 && index$month[i]== 2|index$month[i]== 5|index$month[i]== 8|index$month[i]== 11)
{index$recalc[i] == 1}
else{index$recalc[i]==0}
}
index$recalc <- 0
for (i in 1:nrow(index)) {
if (index$day[i]== 1 && index$month[i]== 2|index$month[i]== 5|index$month[i]== 8|index$month[i]== 11)
{index$recalc[i] == 1}
else{index$recalc[i]==0}
}
for (i in 1:nrow(index)) {
if (index$day[i]== 1 && index$month[i]== 2|index$month[i]== 5|index$month[i]== 8|index$month[i]== 11)
{index$recalc[i] = 1}
else{index$recalc[i]=0}
}
index$recalc <- 0
for (i in 1:nrow(index)) {
if (index$day[i]= 1 && index$month[i]== 2|index$month[i]== 5|index$month[i]== 8|index$month[i]== 11)
{index$recalc[i] = 1}
else{index$recalc[i]=0}
}
for (i in 1:nrow(index)) {
if (index$day[i]= 1 && index$month[i]== 2|index$month[i]== 5|index$month[i]== 8|index$month[i]== 11)
{index$recalc[i] = 1}
else{index$recalc[i]=0}
}
for (i in 1:nrow(index)) {
if (index$day[i]= 1 && index$month[i]== 2|index$month[i]== 5|index$month[i]== 8|index$month[i]== 11)
{index$recalc[i] == 1}
else{index$recalc[i]==0}
}
for (i in 1:nrow(index)) {
if (index$day[i]== 1 && index$month[i]== 2|index$month[i]== 5|index$month[i]== 8|index$month[i]== 11)
{index$recalc[i] == 1}
else{index$recalc[i]==0}
}
index$recalc <- 0
for (i in 1:nrow(index)) {
if (index$day[i]== 1 && index$month[i]== 2|index$month[i]== 5|index$month[i]== 8|index$month[i]== 11)
{index$recalc[i] == 1
}else{index$recalc[i]==0}
}
for (i in 1:nrow(index)) {
if (index$day[i]= 1 && index$month[i]== 2|index$month[i]== 5|index$month[i]== 8|index$month[i]== 11)
{index$recalc[i] == 1
}else{index$recalc[i]==0}
}
index$recalc<-ifelse(index$day[i]== 1 && index$month[i]== 2|index$month[i]== 5|index$month[i]== 8|index$month[i]== 11, 1, 0)
#Set up the reschale date
index$recalc <- 0
index$recalc<-ifelse(index$day== 1 && index$month== 2|index$month== 5|index$month== 8|index$month== 11, 1, 0)
index$recalc<-ifelse(index$day==1 & index$month==2|index$month== 5|index$month== 8|index$month== 11, 1, 0)
#Set up the reschale date
index$recalc <- 0
index$recalc<-ifelse(index$day==1 & index$month==2|index$month== 5|index$month== 8|index$month== 11, 1, 0)
for (i in 1:nrow(index)) {
if ((index$day[i]== 1) && (index$month[i]== 2|index$month[i]== 5|index$month[i]== 8|index$month[i]== 11))
{index$recalc[i] == 1
}else{index$recalc[i]==0}
}
#Set up the reschale date
index$recalc <- 0
for (i in 1:nrow(index)) {
if ((index$day[i]== 1) && (index$month[i]== 2|index$month[i]== 5|index$month[i]== 8|index$month[i]== 11))
{index$recalc[i] == 1
}else{index$recalc[i]==0}
}
#Set up the reschale date
index$recalc <- 0
for (i in 1:nrow(index)) {
if ((index$day[i]== 1) & (index$month[i]== 2|index$month[i]== 5|index$month[i]== 8|index$month[i]== 11))
{index$recalc[i] == 1
}else{index$recalc[i]==0}
}
#Set up the reschale date
index$recalc <- 0
index$recalc<-ifelse(index$day==1&index$month==2|index$month== 5|index$month== 8|index$month== 11, 1, 0)
#Set up the reschale date
index$recalc <- 0
index$recalc<-ifelse((index$day==1)&(index$month==2|index$month== 5|index$month== 8|index$month== 11), 1, 0)
index$day <- NULL
index$month <- NULL
index$divisor[1] = index$vola[1] / index$vcrix[1]
index$divisor[2:92] = index$divisor[1]
index$vcrix[2:92] = index$vola[2:92] / index$divisor[2:92]
index$vcrix[93] = index$vcrix[92]
index$divisor[93:184] = index$vola[93] / index$vcrix[93]
index$vcrix[94:184] = index$vola[94:184] / index$divisor[94:184]
index$vcrix[185] = index$vcrix[184]
index$divisor[185:276] = index$vola[185] / index$vcrix[185]
index$vcrix[186:276] = index$vola[186:276] / index$divisor[186:276]
index$vcrix[277] = index$vcrix[276]
index$divisor[277:365] = index$vola[277] / index$vcrix[277]
index$vcrix[277:365] = index$vola[277:365] / index$divisor[277:365]
index$vcrix[366] = index$vcrix[365]
index$divisor[366:457] = index$vola[366] / index$vcrix[366]
index$vcrix[366:457] = index$vola[366:457] / index$divisor[366:457]
index$vcrix[458] = index$vcrix[457]
index$divisor[458:549] = index$vola[458] / index$vcrix[458]
index$vcrix[458:549] = index$vola[458:549] / index$divisor[458:549]
index$vcrix[550] = index$vcrix[549]
index$divisor[550:641] = index$vola[550] / index$vcrix[550]
index$vcrix[550:641] = index$vola[550:641] / index$divisor[550:641]
index$vcrix[642] = index$vcrix[641]
index$divisor[642:730] = index$vola[642] / index$vcrix[642]
index$vcrix[642:730] = index$vola[642:730] / index$divisor[642:730]
index$divisor2 <- 0
index$vcrix2 <- 0
index$vcrix2[1] = 1000
index$divisor[1] =index$vola[1]/index$vcrix[1]
index$divisor2[1] =index$vola[1]/index$vcrix2[1]
for (i in 2:nrow(index)) {
if (index$recalc[i] == 1) {
index$vcrix2[i] =index$vcrix2[i-1]
index$divisor2[i] =index$vola[i]/index$vcrix2[i]
} else {
index$divisor2[i] =index$divisor2[i-1]
index$vcrix2[i] =index$vola[i]/index$divisor2[i]
}
}
for (i in 2:nrow(index)) {
if (index$recalc[i] == 1) {
index$vcrix[i] =index$vcrix[i-1]
index$divisor[i] =index$vola[i]/index$vcrix[i]
} else {
index$divisor[i] =index$divisor[i-1]
index$vcrix[i] =index$vola[i]/index$divisor[i]
}
}
index$divisor2 <- NULL
index$vcrix2 <- NULL
plot(
index$date,
index$vcrix,
type = "l",
col = "blue",
lwd = 2,
xlab = "Date",
ylab = "VCRIX"
)
for (i in 2:nrow(index)) {
if (index$recalc[i] == 1) {
index$vcrix[i] =index$vcrix[i-1]
index$divisor[i] =index$vola[i]/index$vcrix[i]
} else {
index$divisor[i] =index$divisor[i-1]
index$vcrix[i] =index$vola[i]/index$divisor[i]
}
}
index$vcrix[1] = 1000
index$divisor[1] =index$vola[1]/index$vcrix[1]
for (i in 2:nrow(index)) {
if (index$recalc[i] == 1) {
index$vcrix[i] =index$vcrix[i-1]
index$divisor[i] =index$vola[i]/index$vcrix[i]
} else {
index$divisor[i] =index$divisor[i-1]
index$vcrix[i] =index$vola[i]/index$divisor[i]
}
}
plot(
index$date,
index$vcrix,
type = "l",
col = "blue",
lwd = 2,
xlab = "Date",
ylab = "VCRIX"
)
rm(cl)
rm(data)
rm(data2)
rm(HNfit)
rm(newcrix)
rm(p)
rm(ptable)
rm(returns)
rm(ts)
rm(v)
rm(vol)
rm(volaest)
rm(vv)
rm(w)
rm(weights)
rm(wtable)
rm(ww)
rm(values)
remove(alpha)
rm(bets)
rm(beta)
rm(crix_returns)
rm(elem)
rm(eps)
rm(gamme)
rm(gamma)
rm(h)
rm(h1)
rm(i)
rm(json_file)
rm(lambda)
rm(libraries)
rm(nrOfCores
rm(nrOfCores)
rm(omega)
rm(var)
rm(VCRIX)
rm(ret)
ff <- index
load("vcrixindex.RData")
setwd("~/Desktop/VCRIXgit/VCRIXgraph")
load("vcrixindex.RData")
