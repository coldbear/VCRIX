rm(list = ls(all = TRUE))
options(scipen = 999)
# please change your working directory
#setwd("C:/...")
#Load data
load("vcrix.RData")
# install and load packages
libraries = c("lubridate", "zoo", "reshape2", "plyr", "MTS", "ggplot2")
lapply(libraries, function(x)
if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries,
library,
quietly = TRUE,
character.only = TRUE)
#Prepare data
data2 <- data[, c("crypto_symbol", "price_usd", "date")]
data2$date <- as.Date(data2$date)
weights$date <- as.Date(weights$date)
#Ensure correct variable names
colnames(weights) <- c("crypto", "weights", "date")
colnames(data2) <- c("crypto", "price", "date")
#Select relevant components
data <- data2[data2$crypto %in% weights$crypto, ]
w <- weights[order(weights$crypto), ]
p <- data[order(data$crypto), ]
#Prepare the time series format
wtable <- reshape(  #for weights
w,
v.names = "weights",
idvar = "date",
timevar = "crypto",
direction = "wide"
)
ptable <- reshape(  #for prices
p,
v.names = "price",
idvar = "date",
timevar = "crypto",
direction = "wide"
)
wtable <- wtable[order(wtable$date), ]
ptable <- ptable[order(ptable$date), ]
#Ensure there are no NAs
ptable[, -1] <- na.locf(ptable[, -1])
#Convert prices into returns
ret <- function(x) {
diff(log(x))
}
returns <- colwise(ret)(ptable[, -1])
returns$date <- ptable$date[-1]
returns$dat <- as.yearmon(returns$date, "%y-%m")
wtable$dat <- as.yearmon(wtable$date, "%y-%m")
wtable$date <- NULL
#Merge price and weight tables into the main dataset
ts <- merge(returns, wtable, by = "dat")
ts$dat <- NULL
# Double check for missing values to avoid NA in var-covar matrix estimation
ts[, grepl("price", names(ts))] <-
na.locf(ts[, grepl("price", names(ts))])
is.na(ts) <- do.call(cbind, lapply(ts, is.infinite))
ts[is.na(ts)] <- 0 #otherwise EWMA will return NAs
#Estimating variance covariance matrix with EWMA
elem <-
length(grep(x = colnames(ts), pattern = "price")) #number of cryptos
#select lambda
volaest <- EWMAvol(ts[, grepl("price", names(ts))], lambda = 0.82)
#estimation takes around takes 5 min
#reorganise the list of var-covar matrices
vol <- volaest[1]
v <- vol[[1]]
var <- c(1:nrow(ts))
vv <-
lapply(1:nrow(v), function(x)
matrix(
v[x, ],
nrow = elem,
ncol = elem,
byrow = TRUE
))
ww <-
as.matrix(ts[, grep(x = colnames(ts), pattern = "weights")]) #selecting weights
#Plugging weights and var-covar matrix into formula
for (i in 1:nrow(ts)) {
var[i] = as.matrix(t(ww[i, ])) %*% vv[[i]] %*% ww[i, ]
}
#Assembling vcrix dataset
index <- data.frame("vola" = sqrt(var), "date" = ts$date)
index$vcrix = c(1:nrow(index))
index$divisor <- c(1:nrow(index))
index$day = lubridate::day(index$date)
index$vcrix[1] = 1000
index$divisor[1] = index$vola[1] / index$vcrix[1]
index$divisor[2:92] = index$divisor[1]
index$vcrix[2:92] = index$vola[2:92] / index$divisor[2:92]
index$vcrix[93] = index$vcrix[92]
index$divisor[93:184] = index$vola[93] / index$vcrix[93]
index$vcrix[94:184] = index$vola[94:184] / index$divisor[94:184]
index$vcrix[185] = index$vcrix[184]
index$divisor[185:276] = index$vola[185] / index$vcrix[185]
index$vcrix[186:276] = index$vola[186:276] / index$divisor[186:276]
index$vcrix[277] = index$vcrix[276]
index$divisor[277:365] = index$vola[277] / index$vcrix[277]
index$vcrix[277:365] = index$vola[277:365] / index$divisor[277:365]
index$vcrix[366] = index$vcrix[365]
index$divisor[366:457] = index$vola[366] / index$vcrix[366]
index$vcrix[366:457] = index$vola[366:457] / index$divisor[366:457]
index$vcrix[458] = index$vcrix[457]
index$divisor[458:549] = index$vola[458] / index$vcrix[458]
index$vcrix[458:549] = index$vola[458:549] / index$divisor[458:549]
index$vcrix[550] = index$vcrix[549]
index$divisor[550:641] = index$vola[550] / index$vcrix[550]
index$vcrix[550:641] = index$vola[550:641] / index$divisor[550:641]
index$vcrix[642] = index$vcrix[641]
index$divisor[642:730] = index$vola[642] / index$vcrix[642]
index$vcrix[642:730] = index$vola[642:730] / index$divisor[642:730]
#Plot VCRIX
plot(
index$date,
index$vcrix,
type = "l",
col = "blue",
lwd = 2,
xlab = "Date",
ylab = "VCRIX"
)
rm(list = ls(all = TRUE))
options(scipen = 999)
# please change your working directory
# setwd("C:/...")
#Load data
load("vcrixindex.RData")
#Install libraries
libraries = ("ggplot2")
lapply(libraries, function(x)
if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries,
library,
quietly = TRUE,
character.only = TRUE)
#Plot VCRIX
plot(
vcrix$date,   #x axis
vcrix$vcrix,  #y axis
type = "l",   #type of graph
col = "blue",
lwd = 2,      #thickness of the line
xlab = "Date",
ylab = "VCRIX"
)
#Plot CRIX
plot(
vcrix$date,
vcrix$crix,
type = "l",
col = "black",
lwd = 2,
xlab = "Date",
ylab = "CRIX"
)
# Plot VCRIX and CRIX
par(mar = c(5, 5, 2, 5))
with(vcrix,
plot(
date,
crix,
type = "line",
col = "black",
ylab = "CRIX",
ylim = c(0, 60000),
xlab = NA
))
par(new = T)
with(
vcrix,
plot(
date,
vcrix,
type = "line",
col = "blue",
lwd = 3,
axes = FALSE,
xlab = "",
ylab = "",
ylim = c(0, 2000)
)
)
axis(side = 4)
mtext(side = 4, line = 3, 'VCRIX')
#legend("topleft", legend=c(expression("CRIX"), "VCRIX"), lty=c(1,1), col=c("black", "blue"))
# Plot VCRIX with BTC returns
par(mar = c(5, 5, 2, 5))
with(
vcrix,
plot(
date,
btcreturn,
type = "line",
col = "red",
ylab = "btc returns",
ylim = c(-0.3, 0.3),#ensuring the proper scale
xlab = NA
)
)
par(new = T)
with(
vcrix,
plot(
date,
vcrix,
type = "line",
col = "blue",
lwd = 3,
axes = FALSE,
xlab = "",
ylab = "",
ylim = c(0, 2000)   #ensuring the proper scale
)
)
axis(side = 4)
mtext(side = 4, line = 3, 'VCRIX')
# Plot VCRIX with trend line
trend = ggplot(vcrix, aes(x = date, y = vcrix)) +
geom_line(color = "blue") + theme_bw() +
theme(                             #setting up the plot theme
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")
)
trend + geom_smooth(
method = "loess",
se = FALSE,
span = 0.6,
col = "red"
) +
theme_classic()
trend = ggplot(vcrix, aes(x = date, y = vcrix)) +
geom_line(color = "blue") + theme_bw() +
theme(                             #setting up the plot theme
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")
)
rm(list = ls(all = TRUE))
options(scipen = 999)
setwd("~/Desktop/VCRIXgit/VCRIXgraph")
rm(list = ls(all = TRUE))
options(scipen = 999)
load("vcrixindex.RData")
#Install libraries
libraries = ("ggplot2")
lapply(libraries, function(x)
if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries,
library,
quietly = TRUE,
character.only = TRUE)
#Plot VCRIX
plot(
vcrix$date,   #x axis
vcrix$vcrix,  #y axis
type = "l",   #type of graph
col = "blue",
lwd = 2,      #thickness of the line
xlab = "Date",
ylab = "VCRIX"
)
#Plot CRIX
plot(
vcrix$date,
vcrix$crix,
type = "l",
col = "black",
lwd = 2,
xlab = "Date",
ylab = "CRIX"
)
# Plot VCRIX and CRIX
par(mar = c(5, 5, 2, 5))
with(vcrix,
plot(
date,
crix,
type = "line",
col = "black",
ylab = "CRIX",
ylim = c(0, 60000),
xlab = NA
))
par(new = T)
with(
vcrix,
plot(
date,
vcrix,
type = "line",
col = "blue",
lwd = 3,
axes = FALSE,
xlab = "",
ylab = "",
ylim = c(0, 2000)
)
)
axis(side = 4)
mtext(side = 4, line = 3, 'VCRIX')
#legend("topleft", legend=c(expression("CRIX"), "VCRIX"), lty=c(1,1), col=c("black", "blue"))
# Plot VCRIX with BTC returns
par(mar = c(5, 5, 2, 5))
with(
vcrix,
plot(
date,
btcreturn,
type = "line",
col = "red",
ylab = "btc returns",
ylim = c(-0.3, 0.3),#ensuring the proper scale
xlab = NA
)
)
par(new = T)
with(
vcrix,
plot(
date,
vcrix,
type = "line",
col = "blue",
lwd = 3,
axes = FALSE,
xlab = "",
ylab = "",
ylim = c(0, 2000)   #ensuring the proper scale
)
)
axis(side = 4)
mtext(side = 4, line = 3, 'VCRIX')
# Plot VCRIX with trend line
trend = ggplot(vcrix, aes(x = date, y = vcrix)) +
geom_line(color = "blue") + theme_bw() +
theme(                             #setting up the plot theme
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black")
)
trend + geom_smooth(
method = "loess",
se = FALSE,
span = 0.6,
col = "red"
) +
theme_classic()
